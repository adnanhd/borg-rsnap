#!/bin/bash
#
# rsnap â€“ Incremental Backups using rsync
#
# This script supports the following subcommands:
#
#   init [<path>] [--dry-run] [--force-full]
#       Initialize a backup repository for <path> (or the current directory if not provided)
#       by writing a .myrsyncbackup configuration file and setting up the backup directory structure.
#       No backup is performed.
#
#   snapshot [--dry-run] [--force-full]
#       Create a new backup snapshot for the repository defined in the current directory (or its nearest parent).
#
#   prune [options]
#       Prune backup snapshots from the repository.
#       Options (mutually exclusive):
#         --last X   : Remove the newest X snapshots.
#         --first X  : Remove the oldest X snapshots.
#         --older X  : Remove snapshots older than X days.
#         --newer X  : Remove snapshots newer than X days.
#         --all      : Remove all snapshots.
#       If no option is given, interactive mode is used.
#
#   restore [<snapshot>]
#       Restore a backup snapshot from the repository to the current directory.
#       If <snapshot> is not provided, an interactive menu is displayed.
#
#   log [<log-index-or-substring>]
#       Display a backup log file.
#       If an argument is provided, it selects the log file; otherwise, interactive mode.
#
#   list
#       List all available backup snapshots for the repository.
#
#   diff
#       Compare two snapshots.
#       For the first snapshot, if you leave input empty, the live state ("current") is used.
#       The second snapshot must be chosen from the available snapshots.
#
#   size
#       Display the size (similar to du -sh) of a snapshot.
#
# Options:
#   --dry-run      Simulate actions without making any changes.
#   --force-full   Force a full backup (do not use incremental linking).
#   -h, --help     Show this help message and exit.
#

set -o errexit
set -o nounset
set -o pipefail

# Use RSYNC_BACKUP_ROOT if defined; otherwise default to "$HOME/.rsync_backups"
if [ -z "${RSYNC_BACKUP_ROOT:-}" ]; then
    RSYNC_BACKUP_ROOT="$HOME/.rsync_backups"
fi

usage() {
    cat <<'EOF'
usage: rsnap [--dry-run] [--force-full] <command> ...

rsnap - Incremental Backups using rsync

Commands:
  init [<path>]
      Initialize a backup repository for <path> (or the current directory if not provided).
      This creates a .myrsyncbackup configuration file and sets up the backup storage structure.
  snapshot [--dry-run] [--force-full]
      Create a new backup snapshot for the repository defined in the current directory (or its nearest parent).
  prune [options]
      Prune backup snapshots.
      Options (mutually exclusive):
        --last X   : Remove the newest X snapshots.
        --first X  : Remove the oldest X snapshots.
        --older X  : Remove snapshots older than X days.
        --newer X  : Remove snapshots newer than X days.
        --all      : Remove all snapshots.
      If no option is given, interactive mode is used.
  restore [<snapshot>]
      Restore a backup snapshot from the repository to the current directory.
      If <snapshot> is not provided, an interactive menu will allow you to choose one.
  log [<log-index-or-substring>]
      Display a backup log file.
      If an argument is provided, it selects the log file; otherwise interactive mode is used.
  list
      List all available backup snapshots for the repository.
  diff
      Compare two snapshots.
      For the first prompt, leave input empty to use the live state ("current").
      The second prompt must select a snapshot.
  size
      Display the size (du -sh) of a snapshot.

Common options:
  --dry-run      Simulate actions without making any changes.
  --force-full   Force a full backup (do not use incremental linking).
  -h, --help     Show this help message and exit.
EOF
    exit 1
}

# --- Utility Functions ---

# find_repo_root: Search upward from a given directory for a .myrsyncbackup file.
find_repo_root() {
  local dir
  dir=$(realpath "$1")
  while [ "$dir" != "/" ]; do
    if [ -f "$dir/.myrsyncbackup" ]; then
      echo "$dir"
      return 0
    fi
    dir=$(dirname "$dir")
  done
  return 1
}

# find_parent_repo: Starting from a given directory, search upward for a parent repository (.myrsyncbackup).
find_parent_repo() {
  local current_repo parent_dir
  current_repo=$(realpath "$1")
  parent_dir=$(dirname "$current_repo")
  while [ "$parent_dir" != "/" ]; do
    if [ -f "$parent_dir/.myrsyncbackup" ]; then
      echo "$parent_dir"
      return 0
    fi
    parent_dir=$(dirname "$parent_dir")
  done
  return 1
}

# --- Core rsync Backup Functions ---

# perform_backup:
#   Uses rsync to copy the contents of the source directory into a timestamped backup directory.
#   If a previous backup exists (via the 'latest' symlink under data/) and a full backup is not forced,
#   rsync uses --link-dest to hard-link unchanged files.
#   Exclusion patterns are taken from the EXCLUDES array defined in .myrsyncbackup (or default values).
perform_backup() {
  local source_dir="$1"
  shift
  local backup_dir="$1"   # Repository directory (under RSYNC_BACKUP_ROOT)
  shift

  local DRY_RUN=false
  local FORCE_FULL=false

  while [[ $# -gt 0 ]]; do
    case "$1" in
      --dry-run)
        DRY_RUN=true
        shift
        ;;
      --force-full|--create)
        FORCE_FULL=true
        shift
        ;;
      *)
        echo "Unknown option: $1"
        shift
        ;;
    esac
  done

  local DATETIME
  DATETIME=$(date '+%Y-%m-%d_%H:%M:%S')

  # Repository structure uses subdirectories: data for snapshots and logs for log files.
  local data_dir="${backup_dir}/data"
  local logs_dir="${backup_dir}/logs"

  mkdir -p "${data_dir}" "${logs_dir}"

  local backup_path="${data_dir}/${DATETIME}"
  local latest_link="${data_dir}/latest"
  local log_file="${logs_dir}/${DATETIME}.log"

  local LINK_DEST_PARAM=()
  if [ "$FORCE_FULL" = true ]; then
    echo "Force full backup enabled: performing a full backup without incremental linking."
  elif [ -L "${latest_link}" ] && [ -d "${latest_link}" ]; then
    echo "Using incremental backup (hard links from '${latest_link}')."
    LINK_DEST_PARAM=(--link-dest="${latest_link}")
  else
    echo "No previous backup found. Performing a full backup."
  fi

  local DRY_RUN_FLAG=""
  if [ "$DRY_RUN" = true ]; then
    echo "Dry run mode enabled. No changes will be made."
    DRY_RUN_FLAG="--dry-run"
  fi

  # Build exclusion parameters.
  local exclude_params=()
  if declare -p EXCLUDES >/dev/null 2>&1; then
    for ex in "${EXCLUDES[@]}"; do
      exclude_params+=(--exclude="$ex")
    done
  else
    exclude_params+=(--exclude=".cache" --exclude="tmp" --exclude="__pycache__")
  fi

  echo "Starting backup of '${source_dir}' to '${backup_path}'..."
  rsync $DRY_RUN_FLAG --partial --archive --verbose --delete \
    "${source_dir}/" \
    "${LINK_DEST_PARAM[@]}" \
    "${exclude_params[@]}" \
    --log-file="${log_file}" \
    "${backup_path}"

  if [ "$DRY_RUN" != true ]; then
    echo "Updating 'latest' symlink..."
    rm -rf "${latest_link}"
    ln -s "${backup_path}" "${latest_link}"
  fi

  echo "Backup of '${source_dir}' completed."

  local parent_repo
  parent_repo=$(find_parent_repo "${source_dir}") || true
  if [ -n "${parent_repo:-}" ]; then
    echo "Found parent backup repository at '${parent_repo}'."
    echo "Initiating backup for the parent repository..."
    ( cd "${parent_repo}" && exec "$0" snapshot "$@" )
  fi
}

# snapshot_command:
#   Finds the repository root (by looking for .myrsyncbackup), sources its configuration,
#   and then calls perform_backup.
snapshot_command() {
  local repo_root
  repo_root=$(find_repo_root "$(pwd)") || {
    echo "No backup repository found in the current directory or its parents (missing .myrsyncbackup)."
    exit 1
  }
  cd "$repo_root" || exit 1
  if [ -f ".myrsyncbackup" ]; then
    source ".myrsyncbackup"
  else
    echo "Error: .myrsyncbackup not found in ${repo_root}."
    exit 1
  fi
  if [ -z "${SOURCE_DIR:-}" ] || [ -z "${BACKUP_DIR:-}" ]; then
    echo "Invalid .myrsyncbackup file. It must define SOURCE_DIR and BACKUP_DIR."
    exit 1
  fi
  perform_backup "$SOURCE_DIR" "$BACKUP_DIR" "$@"
}

# init_command:
#   Initializes a backup repository for a given directory by creating a repository under RSYNC_BACKUP_ROOT
#   and writing a .myrsyncbackup configuration file. No snapshot is taken.
init_command() {
    local src
    if [ $# -gt 0 ] && [ -d "$1" ]; then
        src=$(realpath "$1")
    else
        src=$(pwd)
    fi

    if [ -f "$src/.myrsyncbackup" ]; then
        echo "Rsync backup repository already initialized in '$src'. Skipping initialization."
        exit 0
    fi

    local safe_name
    safe_name=$(echo "$src" | sed 's/!/!!/g' | sed 's/\//!/g')
    local backup_dir="${RSYNC_BACKUP_ROOT}/${safe_name}"
    mkdir -p "${backup_dir}"

    cat > "$src/.myrsyncbackup" <<EOF
# Backup repository configuration for ${src}
SOURCE_DIR="./"
BACKUP_DIR="${backup_dir}"
EOF

    echo "Initialized rsync backup repository for '${src}'."
    echo "Backup storage is located at '${backup_dir}'."
}

# --- Updated purge_command ---
# Supports options:
#   --last X: Removes the newest X snapshots (the ones at the end of the sorted list).
#   --first X: Removes the oldest X snapshots (the ones at the beginning).
#   --older X: Removes snapshots with a timestamp older than X days.
#   --newer X: Removes snapshots with a timestamp newer than X days.
#   --all: Removes all snapshots.
# If no option is given, enters interactive mode.
# In non-interactive modes, prompts "Do you want to permanently delete these snapshots [yN]?" before deletion.
purge_command() {
    local mode="" value=""
    # Parse options.
    if [ $# -gt 0 ]; then
        while [ $# -gt 0 ]; do
            case "$1" in
                --last)
                    if [ -n "$mode" ]; then
                        echo "Error: Options --last, --first, --older, --newer, and --all are mutually exclusive."
                        exit 1
                    fi
                    mode="last"
                    shift
                    if [ $# -gt 0 ] && [[ "$1" =~ ^[0-9]+$ ]]; then
                        value="$1"
                        shift
                    else
                        echo "Error: You must provide a numeric value for --last."
                        exit 1
                    fi
                    ;;
                --first)
                    if [ -n "$mode" ]; then
                        echo "Error: Options --last, --first, --older, --newer, and --all are mutually exclusive."
                        exit 1
                    fi
                    mode="first"
                    shift
                    if [ $# -gt 0 ] && [[ "$1" =~ ^[0-9]+$ ]]; then
                        value="$1"
                        shift
                    else
                        echo "Error: You must provide a numeric value for --first."
                        exit 1
                    fi
                    ;;
                --older)
                    if [ -n "$mode" ]; then
                        echo "Error: Options --last, --first, --older, --newer, and --all are mutually exclusive."
                        exit 1
                    fi
                    mode="older"
                    shift
                    if [ $# -gt 0 ] && [[ "$1" =~ ^[0-9]+$ ]]; then
                        value="$1"
                        shift
                    else
                        echo "Error: You must provide a numeric value (in days) for --older."
                        exit 1
                    fi
                    ;;
                --newer)
                    if [ -n "$mode" ]; then
                        echo "Error: Options --last, --first, --older, --newer, and --all are mutually exclusive."
                        exit 1
                    fi
                    mode="newer"
                    shift
                    if [ $# -gt 0 ] && [[ "$1" =~ ^[0-9]+$ ]]; then
                        value="$1"
                        shift
                    else
                        echo "Error: You must provide a numeric value (in days) for --newer."
                        exit 1
                    fi
                    ;;
                --all)
                    if [ -n "$mode" ]; then
                        echo "Error: Options --last, --first, --older, --newer, and --all are mutually exclusive."
                        exit 1
                    fi
                    mode="all"
                    shift
                    ;;
                *)
                    echo "Unknown option: $1"
                    usage
                    ;;
            esac
        done
    fi

    # If no mode was provided, enter interactive mode.
    if [ -z "$mode" ]; then
        mode="interactive"
    fi

    # Get repository configuration.
    local repo_root
    repo_root=$(find_repo_root "$(pwd)") || {
        echo "No backup repository found (missing .myrsyncbackup)."
        exit 1
    }
    cd "$repo_root" || exit 1
    if [ -f ".myrsyncbackup" ]; then
        source ".myrsyncbackup"
    else
        echo "Error: .myrsyncbackup not found in ${repo_root}."
        exit 1
    fi
    if [ -z "${BACKUP_DIR:-}" ]; then
        echo "Invalid .myrsyncbackup file. It must define BACKUP_DIR."
        exit 1
    fi

    local data_dir="${BACKUP_DIR}/data"
    if [ ! -d "${data_dir}" ]; then
        echo "Data directory ${data_dir} does not exist. No snapshots to purge."
        exit 0
    fi

    # List snapshots in ascending order (oldest first).
    local backups
    mapfile -t backups < <(find "${data_dir}" -maxdepth 1 -mindepth 1 -type d ! -name "latest" -printf "%f\n" | sort)
    local total="${#backups[@]}"
    echo "Total snapshots found: $total"

    if [ "$mode" != "interactive" ]; then
        # Non-interactive mode: display snapshots to remove and prompt for confirmation.
        case "$mode" in
            last)
                if [ "$total" -lt "$value" ]; then
                    echo "Error: Total snapshots ($total) is less than the number to remove ($value)."
                    exit 1
                fi
                echo "Prune option --last: The following newest $value snapshots will be removed:"
                # Newest snapshots are at the end of the list.
                for (( i = 0; i < value; i++ )); do
                    echo "- ${data_dir}/${backups[i]}"
                done
                ;;
            first)
                if [ "$total" -lt "$value" ]; then
                    echo "Error: Total snapshots ($total) is less than the number to remove ($value)."
                    exit 1
                fi
                echo "Prune option --first: The following oldest $value snapshots will be removed:"
                for (( i = 0; i < total - value; i++ )); do
                    echo "- ${data_dir}/${backups[i]}"
                done
                ;;
            older)
                local current_epoch
                current_epoch=$(date +%s)
                local cutoff=$(( current_epoch - value * 86400 ))
                local found=0
                echo "Prune option --older: The following snapshots older than $value days (cutoff: $(date -d @$cutoff)) will be removed:"
                for backup in "${backups[@]}"; do
                    local backup_time
                    backup_time=$(echo "$backup" | tr '_' ' ')
                    local backup_epoch
                    backup_epoch=$(date -d "$backup_time" +%s 2>/dev/null || echo 0)
                    if [ "$backup_epoch" -lt "$cutoff" ]; then
                        echo "- ${data_dir}/$backup (date: $backup_time)"
                        found=$(( found + 1 ))
                    fi
                done
                if [ "$found" -eq 0 ]; then
                    echo "No snapshots older than $value days found."
                    exit 0
                fi
                ;;
            newer)
                local current_epoch
                current_epoch=$(date +%s)
                local cutoff=$(( current_epoch - value * 86400 ))
                local found=0
                echo "Prune option --newer: The following snapshots newer than $value days (cutoff: $(date -d @$cutoff)) will be removed:"
                for backup in "${backups[@]}"; do
                    local backup_time
                    backup_time=$(echo "$backup" | tr '_' ' ')
                    local backup_epoch
                    backup_epoch=$(date -d "$backup_time" +%s 2>/dev/null || echo 0)
                    if [ "$backup_epoch" -gt "$cutoff" ]; then
                        echo "- ${data_dir}/$backup (date: $backup_time)"
                        found=$(( found + 1 ))
                    fi
                done
                if [ "$found" -eq 0 ]; then
                    echo "No snapshots newer than $value days found."
                    exit 0
                fi
                ;;
            all)
                if [ "$total" -eq 0 ]; then
                    echo "No snapshots to purge."
                    exit 0
                fi
                echo "Prune option --all: All snapshots will be removed:"
                for backup in "${backups[@]}"; do
                    echo "- ${data_dir}/$backup"
                done
                ;;
            *)
                echo "Unknown prune mode: $mode"
                usage
                ;;
        esac
        read -rp "Do you want to permanently delete these snapshots [yN]? " ans
        if [[ "$ans" =~ ^[Yy]$ ]]; then
            case "$mode" in
                last)
                    for (( i = 0; i < value; i++ )); do
                        rm -rf "${data_dir}/${backups[i]}"
                    done
                    ;;
                first)
                    for (( i = 0; i < total - value; i++ )); do
                        rm -rf "${data_dir}/${backups[i]}"
                    done
                    ;;
                older)
                    for backup in "${backups[@]}"; do
                        local backup_time
                        backup_time=$(echo "$backup" | tr '_' ' ')
                        local backup_epoch
                        backup_epoch=$(date -d "$backup_time" +%s 2>/dev/null || echo 0)
                        if [ "$backup_epoch" -lt "$cutoff" ]; then
                            rm -rf "${data_dir}/$backup"
                        fi
                    done
                    ;;
                newer)
                    for backup in "${backups[@]}"; do
                        local backup_time
                        backup_time=$(echo "$backup" | tr '_' ' ')
                        local backup_epoch
                        backup_epoch=$(date -d "$backup_time" +%s 2>/dev/null || echo 0)
                        if [ "$backup_epoch" -gt "$cutoff" ]; then
                            rm -rf "${data_dir}/$backup"
                        fi
                    done
                    ;;
                all)
                    for backup in "${backups[@]}"; do
                        rm -rf "${data_dir}/$backup"
                    done
                    ;;
            esac
            echo "Snapshots removed."
        else
            echo "Aborted."
        fi
    else
        # Interactive mode: prompt the user which snapshots to purge.
        echo "Interactive mode: Enter the snapshot numbers to purge (separated by spaces), or type 'all' to purge all snapshots:"
        echo "Available snapshots:"
        local i=1
        for backup in "${backups[@]}"; do
            echo "  $i) $backup"
            ((i++))
        done
        read -rp "Your selection: " selection
        if [ "$selection" = "all" ]; then
            echo "About to purge ALL snapshots."
            read -rp "Do you want to permanently delete these snapshots [yN]? " ans
            if [[ "$ans" =~ ^[Yy]$ ]]; then
                for backup in "${backups[@]}"; do
                    rm -rf "${data_dir}/$backup"
                done
                echo "All snapshots removed."
            else
                echo "Aborted."
            fi
        else
            local indices=($selection)
            echo "The following snapshots will be removed:"
            for index in "${indices[@]}"; do
                if ! [[ "$index" =~ ^[0-9]+$ ]]; then
                    echo "Invalid input: '$index' is not a number."
                    exit 1
                fi
                if [ "$index" -lt 1 ] || [ "$index" -gt "$total" ]; then
                    echo "Invalid selection: $index is out of range (1-$total)."
                    exit 1
                fi
                echo "- ${data_dir}/${backups[$(( index - 1 ))]}"
            done
            read -rp "Do you want to permanently delete these snapshots [yN]? " ans
            if [[ "$ans" =~ ^[Yy]$ ]]; then
                for index in "${indices[@]}"; do
                    rm -rf "${data_dir}/${backups[$(( index - 1 ))]}"
                done
                echo "Snapshots removed."
            else
                echo "Aborted."
            fi
        fi
    fi
}


# --- Updated Diff Command ---
# rsync_diff_command: Compare two snapshots using diff.
# For the first snapshot, if the user input is left empty (i.e. just press Enter),
# it will be taken as the live state ("current"). The second snapshot must be chosen from the available snapshots.
rsync_diff_command() {
    local repo_root snapshot1 snapshot2 data_dir

    repo_root=$(find_repo_root "$(pwd)") || {
         echo "No backup repository found (missing .myrsyncbackup).";
         exit 1;
    }
    cd "$repo_root" || exit 1
    source ".myrsyncbackup" || {
         echo "Error: .myrsyncbackup not found.";
         exit 1;
    }
    if [ -z "${BACKUP_DIR:-}" ]; then
         echo "Invalid .myrsyncbackup file (BACKUP_DIR not defined).";
         exit 1;
    fi

    data_dir="${BACKUP_DIR}/data"
    if [ ! -d "$data_dir" ]; then
         echo "Data directory ${data_dir} does not exist.";
         exit 1;
    fi

    # List snapshots in ascending order.
    local snapshots
    mapfile -t snapshots < <(find "$data_dir" -maxdepth 1 -mindepth 1 -type d ! -name "latest" -printf "%f\n" | sort)
    if [ ${#snapshots[@]} -eq 0 ]; then
         echo "No snapshots available.";
         exit 1;
    fi

    echo "Available snapshots for comparison (second snapshot):"
    local i=1
    for s in "${snapshots[@]}"; do
        echo "  $i) $s"
        ((i++))
    done

    # echo "For diff, leave the first prompt empty to use the live state (current directory)."

    # Prompt for the first snapshot.
    read -rp "Enter the number of the first snapshot for diff (or press Enter for current state): " choice
    if [ -z "$choice" ]; then
        snapshot1="current"
    elif [[ "$choice" =~ ^[0-9]+$ ]]; then
        if [ "$choice" -lt 1 ] || [ "$choice" -gt "${#snapshots[@]}" ]; then
            echo "Invalid selection."
            exit 1
        fi
        snapshot1="${snapshots[$((choice-1))]}"
    else
        echo "Invalid input."
        exit 1
    fi

    # Prompt for the second snapshot (must choose from snapshots).
    read -rp "Enter the number of the snapshot to compare with: " choice
    if ! [[ "$choice" =~ ^[0-9]+$ ]] || [ "$choice" -lt 1 ] || [ "$choice" -gt "${#snapshots[@]}" ]; then
        echo "Invalid selection."
        exit 1
    fi
    snapshot2="${snapshots[$((choice-1))]}"

    if [ "$snapshot1" = "current" ]; then
        echo "Comparing live state (current directory) with snapshot '$snapshot2'..."
        diff -r "$(pwd)" "${data_dir}/${snapshot2}"
    else
        echo "Comparing snapshot '$snapshot1' with snapshot '$snapshot2'..."
        diff -r "${data_dir}/${snapshot1}" "${data_dir}/${snapshot2}"
    fi
}


# rsync_size_command: Display the size of a snapshot using du -sh.
rsync_size_command() {
    local repo_root snapshot data_dir

    repo_root=$(find_repo_root "$(pwd)") || {
         echo "No backup repository found (missing .myrsyncbackup).";
         exit 1;
    }
    cd "$repo_root" || exit 1
    source ".myrsyncbackup" || {
         echo "Error: .myrsyncbackup not found.";
         exit 1;
    }
    if [ -z "${BACKUP_DIR:-}" ]; then
         echo "Invalid .myrsyncbackup file (BACKUP_DIR not defined).";
         exit 1;
    fi

    data_dir="${BACKUP_DIR}/data"

    local snapshots
    mapfile -t snapshots < <(find "$data_dir" -maxdepth 1 -mindepth 1 -type d ! -name "latest" -printf "%f\n" | sort)
    if [ ${#snapshots[@]} -eq 0 ]; then
         echo "No snapshots available.";
         exit 1;
    fi

    echo "Available snapshots:"
    local i=1
    for snap in "${snapshots[@]}"; do
         echo "  $i) $snap"
         ((i++))
    done
    read -rp "Enter the number of the snapshot to check size: " choice
    if ! [[ "$choice" =~ ^[0-9]+$ ]] || [ "$choice" -lt 1 ] || [ "$choice" -gt "${#snapshots[@]}" ]; then
         echo "Invalid selection."
         exit 1
    fi
    snapshot="${snapshots[$((choice-1))]}"

    echo "Size information for snapshot '$snapshot':"
    du -sh "${data_dir}/${snapshot}"
}


# restore_command, log_command, list_command remain unchanged from your current version.

restore_command() {
  local repo_root
  repo_root=$(find_repo_root "$(pwd)") || {
    echo "No backup repository found in the current directory or its parents (missing .myrsyncbackup)."
    exit 1
  }
  cd "$repo_root" || exit 1
  if [ -f ".myrsyncbackup" ]; then
    source ".myrsyncbackup"
  else
    echo "Error: .myrsyncbackup not found in ${repo_root}."
    exit 1
  fi
  if [ -z "${BACKUP_DIR:-}" ]; then
    echo "Invalid .myrsyncbackup file. It must define BACKUP_DIR."
    exit 1
  fi

  local data_dir="${BACKUP_DIR}/data"
  mapfile -t snapshots < <(find "${data_dir}" -maxdepth 1 -mindepth 1 -type d ! -name "latest" -printf "%f\n" | sort)
  if [ ${#snapshots[@]} -eq 0 ]; then
    echo "No snapshots available to restore."
    exit 1
  fi

  local snapshot=""
  if [ $# -gt 0 ]; then
    snapshot="$1"
  else
    echo "Available snapshots:"
    local i=1
    for snap in "${snapshots[@]}"; do
      echo "  $i) $snap"
      ((i++))
    done
    read -rp "Enter the number of the snapshot to restore: " choice
    if ! [[ "$choice" =~ ^[0-9]+$ ]] || [ "$choice" -lt 1 ] || [ "$choice" -gt "${#snapshots[@]}" ]; then
      echo "Invalid selection."
      exit 1
    fi
    snapshot="${snapshots[$((choice-1))]}"
  fi

  # Build exclusion parameters.
  local exclude_params=()
  if declare -p EXCLUDES >/dev/null 2>&1; then
    for ex in "${EXCLUDES[@]}"; do
      exclude_params+=(--exclude="$ex")
    done
  else
    exclude_params+=(--exclude=".cache" --exclude="tmp" --exclude="__pycache__")
  fi

  local snapshot_path="${data_dir}/${snapshot}"
  echo "Restoring snapshot '${snapshot}' from '${snapshot_path}' to the current directory..."
  rsync "${snapshot_path}/" "./" \
      --archive --verbose --delete "${exclude_params[@]}" 
  echo "Restore completed."
}

log_command() {
  local repo_root
  repo_root=$(find_repo_root "$(pwd)") || {
    echo "No backup repository found (missing .myrsyncbackup)."
    exit 1
  }
  cd "$repo_root" || exit 1
  if [ -f ".myrsyncbackup" ]; then
    source ".myrsyncbackup"
  else
    echo "Error: .myrsyncbackup not found in ${repo_root}."
    exit 1
  fi
  if [ -z "${BACKUP_DIR:-}" ]; then
    echo "Invalid .myrsyncbackup file. It must define BACKUP_DIR."
    exit 1
  fi

  local logs_dir="${BACKUP_DIR}/logs"
  mapfile -t logs < <(find "${logs_dir}" -maxdepth 1 -type f -name '*.log' | sort)
  if [ ${#logs[@]} -eq 0 ]; then
    echo "No log files found in ${logs_dir}."
    exit 0
  fi

  local log_choice=""
  if [ $# -gt 0 ]; then
    log_choice="$1"
    if [[ "$log_choice" =~ ^[0-9]+$ ]]; then
      local index=$(( log_choice - 1 ))
      if [ $index -ge 0 ] && [ $index -lt ${#logs[@]} ]; then
        log_choice="${logs[$index]}"
      else
        echo "Invalid log index: $1"
        exit 1
      fi
    else
      local found=""
      for lf in "${logs[@]}"; do
        if [[ "$(basename "$lf")" == *"$log_choice"* ]]; then
          found="$lf"
          break
        fi
      done
      if [ -z "$found" ]; then
        echo "No log file matches '$log_choice'."
        exit 1
      fi
      log_choice="$found"
    fi
  else
    echo "Available log files:"
    local i=1
    for lf in "${logs[@]}"; do
      echo "  $i) $(basename "$lf")"
      ((i++))
    done
    read -rp "Enter the number of the log file to view: " choice
    if ! [[ "$choice" =~ ^[0-9]+$ ]] || [ "$choice" -lt 1 ] || [ "$choice" -gt "${#logs[@]}" ]; then
      echo "Invalid selection."
      exit 1
    fi
    log_choice="${logs[$((choice-1))]}"
  fi

  echo "Displaying log file: $(basename "$log_choice")"
  less "$log_choice"
}

list_command() {
  local repo_root
  repo_root=$(find_repo_root "$(pwd)") || {
    echo "No backup repository found in the current directory or its parents (missing .myrsyncbackup)."
    exit 1
  }
  cd "$repo_root" || exit 1
  if [ -f ".myrsyncbackup" ]; then
    source ".myrsyncbackup"
  else
    echo "Error: .myrsyncbackup not found in ${repo_root}."
    exit 1
  fi
  if [ -z "${BACKUP_DIR:-}" ]; then
    echo "Invalid .myrsyncbackup file. It must define BACKUP_DIR."
    exit 1
  fi

  local data_dir="${BACKUP_DIR}/data"

  local backups
  mapfile -t backups < <(find "${data_dir}" -maxdepth 1 -mindepth 1 -type d ! -name "latest" -printf "%f\n" | sort)
  local total="${#backups[@]}"
  echo "Available snapshots ($total) in '${BACKUP_DIR}':"
  if [ "$total" -gt 0 ]; then
    find "${data_dir}" -maxdepth 1 -mindepth 1 -type d ! -name "latest" -printf "%f\n" | sort | sed 's/^/- /'
  fi
}

# --- Main Command Dispatcher ---

if [ $# -lt 1 ]; then
    usage
fi

COMMAND="$1"
shift

case "$COMMAND" in
    init)
        init_command "$@"
        ;;
    snapshot)
        snapshot_command "$@"
        ;;
    prune)
        purge_command "$@"
        ;;
    restore)
        restore_command "$@"
        ;;
    diff)
        rsync_diff_command "$@"
        ;;
    size)
        rsync_size_command "$@"
        ;;
    log)
        log_command "$@"
        ;;
    list)
        list_command "$@"
        ;;
    -h|--help)
        usage
        ;;
    *)
        echo "Unknown command: $COMMAND"
        usage
        ;;
esac
